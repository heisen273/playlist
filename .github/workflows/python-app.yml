# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: "3.11"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest pylint
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Pylint & flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

        # run pylint for project files(i.e. non-tests)
        pylint $(git ls-files '*.py' | grep -v 'tests/')

        # run pylint for tests
        pylint --function-naming-style=any --argument-naming-style=any $(git ls-files 'tests/')
    - name: Pytest
      env:
        YOUTUBE_JSON: ${{ secrets.YOUTUBE_JSON }}
        SPOTIFY_JSON: ${{ secrets.SPOTIFY_JSON }}
        FIREBASE_JSON: ${{ secrets.FIREBASE_JSON }}
        ENV_FILE: ${{ secrets.ENV_FILE }}
      run: |
        # Write github secret to a file: app .config.json, youtube .oauth.json & .spotify_cache
        eval "echo $YOUTUBE_JSON" >> $GITHUB_WORKSPACE/_youtube.json
        eval "echo $SPOTIFY_JSON" >> $GITHUB_WORKSPACE/_spotify.json
        eval "echo $FIREBASE_JSON" >> $GITHUB_WORKSPACE/_firebase.json
        eval "echo $ENV_FILE" >> $GITHUB_WORKSPACE/.env

        pytest -v --cov

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
